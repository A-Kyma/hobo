<def tag="submit" attrs="label">
  <input type="submit" value="<%= label %>" xattrs="" class="button_input"/>
</def>


<def tag="autocompleter" attrs="completer_model, completer_attr, id, filter, name, value">
  <% refl = this_type
     if refl && refl.macro == :belongs_to
       completer_model ||= refl.klass
       completer_attr ||= refl.klass.id_name_column
     else
       completer_model = completer_model.constantize if completer_model.is_a? String
     end
     id ||= this_field_dom_id + "_completer"
     url = object_url(completer_model, "completions",
                      { :for => completer_attr },
                      options.select_hash {|k,v| k.to_s.starts_with? "where_"})
  %>
  <input type="text" name="<%= name %>" id="<%= id %>" class="autocomplete_bhv"
         autocomplete_url="<%= url %>" value="<%= value %>"
         xattrs=""/>
  <div id="<%= id %>_completions" class="completions_popup" style="display:none"></div>
</def>


<def tag="belongs_to_menu_field"><%
  raise HoboError.new("Not allowed to edit") unless can_edit_this?
  #Todo: switch to autocompleter for id_name when too many records, and id_name supported
  select_options = this_type.klass.find(:all).select {|x| can_view?(x)}.map {|x| [ display_name(:obj => x), x.id ] }
  select_options.insert(0, ["(No #{this_type.name.to_s.titleize})", ""]) if this.nil?
  %>
  <select name="<%= param_name_for_this(true) %>">
    <%= options_for_select(select_options.sort, this ? this.id : "") %>
  </select>
</def>


<def tag="belongs_to_menu_editor"><%
  raise HoboError.new("Not allowed to edit") unless can_edit_this?
  link_id = "#{this_field_dom_id}_editor" %>
  <span id="#link_id" part_id="rapid_belongs_to_edit">
    <% select_options = this_type.klass.find(:all).select {|x| can_view?(x)}.map {|x| [ display_name(:obj => x), x.id ] }
       select_options.insert(0, ["(No #{this_type.name.to_s.titleize})", ""]) if this.nil?
       link_id = "#{this_field_dom_id}_editor"
       f = ajax_updater(object_url(this_parent),
                        "Change #{this_field.to_s.titleize}", [link_id],
                        :method => "put",
                        :params => { this_parent.class.name.underscore => {
                            this_type.association_foreign_key => Hobo.raw_js('this.value')
                          } })
    %>
    <select onchange="<%= f %>" id="#link_id">
      <%= options_for_select(select_options.sort, this ? this.id : "") %>
    </select>
    <if_this><object_link>View</object_link></if_this>
  </span>
</def>


<def tag="belongs_to_autocompleting_field">
<% refl = this_type
   completer_model ||= refl.klass
   completer_attr ||= refl.klass.id_name_column
   id ||= this_field_dom_id + "_completer"
   where_options = options.select_hash {|k,v| k.to_s.starts_with? "where_"}
   url = object_url(completer_model, :action => :completions,
                    :params => { :for => completer_attr }.update(where_options))
  %>

  <input type="text" id="<%= id %>" class="autocomplete_bhv" autocomplete_url="<%= url %>"
         name="<%= param_name_for_this %>" xattrs=""/>
  <div id="<%= id %>_completions" class="completions_popup" style="display:none"></div>
</def>


<def tag="belongs_to_autocompleting_editor" attrs="update">
  <if_can_edit><%
  return object_link unless can_edit_this?

  id ||= this_field_dom_id + "_completer"
  f = ajax_updater(object_url(this_parent),
                   "Change #{this_field.to_s.titleize}", update,
                   :method => "put",
                   :params => { this_parent.class.name.underscore => {
                       this_field => Hobo.raw_js("$('#{id}').value")
                    } })
  refl = this_type
  completer_model ||= refl.klass
  completer_attr ||= refl.klass.id_name_column
  url = object_url(completer_model, "completions",
                   { :for => completer_attr },
                   options.select_hash {|k,v| k.to_s.starts_with? "where_"})
  %>
    <form onsubmit="<%= f %>; $('<%= id %>').blur(); return false">
      <input type="text" class="autocomplete_bhv autosubmit" id="<%= id %>" autocomplete_url="<%= url %>"
             value="<%= this && this.id_name %>" xattrs="" />
      <div id="<%= id %>_completions" class="completions_popup" style="display:none"></div>
    </form>
  </if_can_edit>
  <else>
    <object_link/>
  </else>
</def>


<def tag="boolean_checkbox_editor" attrs="update"><%
  raise HoboError.new("Not allowed to edit") unless can_edit_this?
  f = ajax_updater(object_url(this_parent),
                   "Change #{this_field.to_s.titleize}", update,
                   :method => "put",
                   :params => { this_parent.class.name.underscore => {
                       this_field => Hobo.raw_js('this.checked')
                    } })
%>
  <%=  check_box_tag "x", "1", this, :onchange => f %>
</def>


<def tag="sti_type_field">
  <select name="<%= param_name_for(form_this, form_field_path + ['type']) %>">
    <%= options_for_select(this.class.send(:subclasses).omap{[name.titleize, name]}, this.class.name) %>
  </select>
</def>


<def tag="integer_select_editor" attrs="min, max, update, nil_option, message">
  <select class="number_editor_bhv" hobo_update="<%= update %>"
          hobo_model_id="<%= this_field_dom_id %>"
          xattrs="#message ? options.merge(:hobo_message => message) : options">
    <if q="#this.nil?"><option value=""><%= nil_option || "Choose a value" %></option></if>
    <%= options_for_select((min.to_i..max.to_i).to_a, this) %>
  </select>
</def>


<def tag="select_field">
  <select name="<%= param_name_for_this %>">
    <tagbody/>
  </select>
</def>
