<include module="Hobo::Rapid"/>

<include src="rapid_pages"/>
<include src="rapid_editing"/>
<include src="rapid_navigation"/>

<def tag="clearer"><div class='clearer'>&nbsp;</div></def>

<def tag="ObjectTable" attrs="fields, skip, associations, editor_tag">
  <% 
     field_inner_tag_options, html_options = attributes.partition_hash {|k,v| k.to_s =~ /_label$|_editor$/ }
#     inner_tag_options.merge!(field_inner_tag_options)
                                                        
     if fields.nil?
       fields = this.class.content_columns.every(:name) - %w{created_at updated_at}
       if this.new_record? && 
           'type'.in?(this.class.column_names) &&
           !this.class.send(:subclasses).empty?
         fields << 'type'
       end
     else
       fields = comma_split(fields)
     end
       
     fields -= comma_split(skip) if skip
     fields = fields.select {|f| can_view?(this, f)}
       
     associations = if associations == '*'
                      this.class.reflections.values.every(:name)
                    elsif associations == 'belongs_to'
                      this.class.reflections.values.oselect{macro == :belongs_to}.every(:name)
                    else
                      comma_split(associations)
                    end
     associations -= comma_split(skip).omap{to_sym} if skip
     html_options = add_classes(html_options, "object_table", ("new_record" if this.new_record?))
     editor_tag ||= "edit"
     # force load
     Hobo.models
  %>
  <table merge_attrs="&html_options">
    <if q="&'type'.in?(fields)">
      <tr>
        <td class="field_label"><label>Type:</label></td>
        <td><sti_type_field/></td>
      </tr>        
    </if>


    <% for field in (fields - ['type']) %>
      <% base_name = field.ends_with?("?") ? field[0..-2] : field %>
      <tr>
        <td class="field_label"
            param="&base_name + '_label'"><label><%= no_break(field.titleize) %>:</label></td>
        <td><with field="&field">
            <call_tag name="&editor_tag" param="&base_name + '_editor'"/>
        </with></td>
      </tr>
    <% end %>

    <% for field in associations.select{|f| can_view?(this, f)} %>
      <tr>
        <td class="field_label"
            param="&field.to_s + '_label'"><label><%= no_break(field.to_s.titleize) %>:</label></td>
        <td><call_tag name="&editor_tag" field="&field" param="&field.to_s + '_editor'"/></td>
      </tr>
    <% end %>

  </table>
</def>


<def tag="has_many_table" attrs="part_id, delete_buttons, headings, id">
  <table_for headings="&headings" merge_attrs="&true">

    <tagbody/>

    <if q="&delete_buttons != false and can_delete?(this)">
      <td><DeleteButton/></td>
    </if>
  </table_for>
  <else>
    <p>There are no <%= this_type.klass.name.titleize.pluralize.downcase %></p>
  </else>
  <div>
    <CreateButton update="&id || part_id"/>
  </div>
</def>


<def tag="ul_for">
  <if q="&!this.empty?">
    <ul merge_attrs="&true">
      <% even_odd = "odd" %>
      <repeat>
        <if_can_view>
          <li class="#{even_odd} #{this_type.name.underscore}" hobo_model_id="#{dom_id this}">
            <%= tagbody.nil? ? object_link : tagbody.call %>
          </li>
        </if_can_view>
        <% even_odd = even_odd == "even" ? "odd" : "even" %>
      </repeat>
    </ul>
  </if>
</def>

<def tag="Table" attrs="row_class">
  <table merge_attrs if="&!this.empty?">
    <thead if="&all_parameters[:thead]"><tr param="thead"></tr></thead>
    <tbody>
      <% even_odd = "odd" %>
      <repeat>
        <if_can_view>
          <tr class="#{even_odd} #{row_class} #{this_type.name.underscore}"
              hobo_model_id="#{dom_id(this)}" param="row">
          </tr>
        </if_can_view>
        <% even_odd = even_odd == "even" ? "odd" : "even" %>
      </repeat>      
    </tbody>
    <tfoot if="&all_parameters[:tfoot]"><tr param="tfoot"></tr></tfoot>
  </table>
</def>

<def tag="table_for" attrs="headings, row_class, footer">
  <if q="&!this.empty?">
    <table merge_attrs="&true">
      <if q="&headings"><tr><%= headings %></tr></if>
      <% even_odd = "odd" %>
      <repeat>
        <if_can_view>
          <tr class="#{even_odd} #{row_class} #{this_type.name.underscore}"
              hobo_model_id="#{dom_id(this)}">
            <%= tagbody && tagbody.call %>
          </tr>
        <% even_odd = even_odd == "even" ? "odd" : "even" %>
        </if_can_view>
      </repeat>
      <%= footer %>
    </table>
  </if>
</def>


<def tag="add_by_name" attrs="action_name, add_text, update, part_id">
  <% add_to = this
     refl = this_type
     joins = this_parent.send(refl.through_reflection.name)
     add_name = refl.klass.name.titleize
     action_name ||= "Add #{add_name}"
     add_text ||= "To #{action_name.downcase} #{a_or_an add_name.downcase}, " +
                  "enter its name"
     source = refl.source_reflection.name
  %>
  <tagbody with="&joins"/>
  <with with="&joins.new_without_appending">
    <if_can_create>
       <object_form update="&[update, part_id]" message="&action_name" hidden_fields="*">
         <p>
           <%= add_text %>:
           <belongs_to_autocompleting_field field="&source" where_not_in="&dom_id(add_to)" class="autosubmit"/>
         </p>
       </object_form>
    </if_can_create>
  </with>
</def>


<def tag="spinner">
  <img src="#{urlb}/hobothemes/#{Hobo.current_theme}/images/spinner.gif" class="hidden" merge_attrs/>
</def>


<def tag="image" attrs="src">
  <img src="#{urlb}/images/#{src}" merge_attrs/>
</def>


<def tag="theme_img" attrs="src">
  <img src="#{theme_asset('images/' + src)}" merge_attrs/>
</def>


<def tag="search_result">
  <div class='search_result'>
    <human_type/>: <object_link/>
  </div>
</def>


<def tag="object_card">
  <div class="object_card">
    <object_link/>
  </div>
</def>


<def tag="section_if">
  <% body = tagbody.call %>
  <%= body.blank? ? "" : section{body} %>
</def>



<def tag="edit" attrs="in_place"><%=
  if can_view_this?
    if not can_edit_this?
      show
    elsif this_parent.new_record? or in_place == false
      form_field(attributes)
    else
      editor(attributes)
    end
  end %>
</def>


<def tag="string_editor">
  <%= in_place_editor "in_place_textfield_bhv", :span, attributes %>
</def>

<def tag="textarea_editor">
  <%= in_place_editor "in_place_textarea_bhv", :div, attributes %>
</def>
  
<def tag="html_editor">
  <%= in_place_editor "in_place_html_textarea_bhv", :div, attributes %>
</def>

<def tag="belongs_to_editor">
  <%= belongs_to_menu_editor(attributes) %>
</def>

<def tag="datetime_editor">
  <%= string_editor(attributes) %>
</def>

<def tag="date_editor">
  <%= string_editor(attributes) %>
</def>

<def tag="integer_editor">
  <%= in_place_editor "in_place_textfield_bhv", :span, attributes %>
</def>

<def tag="float_editor">
  <%= in_place_editor "in_place_textfield_bhv", :span, attributes %>
</def>

<def tag="password_string_editor">
  <%= raise HoboError, "passwords cannot be edited in place" %>
</def>

<def tag="boolean_editor">
  <%= boolean_checkbox_editor(attributes) %>
</def>

<def tag="UpdateButton" attrs="label,message,update,attrs,params"><%=
  raise HoboError.new("no update specified") unless update
  message2 = message || label
  func = ajax_updater(object_url(this), message2, update,
                      :params => { this.class.name.underscore => attrs }.merge(params || {}),
                      :method => :put)
  tag :input, add_classes(attributes.merge(:type =>'button', :onclick => func, :value => label),
                          "button_input update_button update_#{this.class.name.underscore}_button") %>
</def>

<def tag="DeleteButton" attrs="label,message,update,ajax,image,confirm,fade">
  <if_can_delete><%=
    opts = attributes.merge(if image
                           { :type => "image", :src => "#{urlb}/images/#{image}" }
                         else
                           { :type => "button" }
                         end)
    label2 = label || "Remove"
    confirm2 = confirm || "Are you sure?"
    
    add_classes!(opts,
                 image ? "image_button_input" : "button_input",
                 "delete_button delete_#{this.class.name.underscore}_button")
    url = object_url(this, "destroy")
    if ajax == false
      opts[:confirm] = confirm2
      button_to(label2, url, opts)
    else
      fade2 = fade.nil? ? true : fade
      opts[:value] = label2
      opts[:onclick] = "Hobo.removeButton(this, '#{url}', #{js_updates(update)}, #{fade2 ? 'true' : 'false'})"
      tag(:input, opts)
    end
  %></if_can_delete>
</def>

<def tag="CreateButton" attrs="model,update,label,message"><%
  raise HoboError.new("no update specified") unless update
  params = all_parameters[:new_object_fields].call || {}
  if model
    new = (model.is_a?(String) ? model.constantize : model).new(params)
  else
    raise HoboError.new("invalid context for <CreateButton>") unless Hobo.simple_has_many_association?(this)
    params[this.proxy_reflection.primary_key_name] = this.proxy_owner.id
    new = this.new(params)
  end %>
  <if q="&can_create?(new)"><%=
    label2 = label || "New #{new.class.name.titleize}"
    message2 = message || label2
    class_name = new.class.name.underscore
    func = ajax_updater(object_url(new.class), message2, update,
                        ({:params => { class_name => params }} unless params.empty?))
    tag :input, add_classes(attributes.merge(:type =>'button', :onclick => func, :value => label2),
                            "button_input create_button create_#{class_name}_button")
  %></if>
</def>
