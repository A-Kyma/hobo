<include module="Hobo::Rapid"/>

<include src="rapid_pages"/>
<include src="rapid_editing"/>
<include src="rapid_navigation"/>

<def tag="clearer"><div class='clearer'>&nbsp;</div></def>

<def tag="object_table_X">
  <table merge_attrs="object_table">
    <object_table_rows merge_attrs="&options"/>
  </table>
</def>

<def tag="object_table" attrs="fields, skip, associations, editor_tag">
  <% 
     field_inner_tag_options, html_options = options.partition_hash {|k,v| k.to_s =~ /_label$|_editor$/ }
     inner_tag_options.merge!(field_inner_tag_options)
                                                        
     if fields.nil?
       fields = this.class.content_columns.every(:name) - %w{created_at updated_at}
       if this.new_record? && 
           'type'.in?(this.class.column_names) &&
           !this.class.send(:subclasses).empty?
         fields << 'type'
       end
     else
       fields = comma_split(fields)
     end
       
     fields -= comma_split(skip) if skip
     fields = fields.select {|f| can_view?(this, f)}
       
     associations = if associations == '*'
                      this.class.reflections.values.every(:name)
                    elsif associations == 'belongs_to'
                      this.class.reflections.values.oselect{macro == :belongs_to}.every(:name)
                    else
                      comma_split(associations)
                    end
     associations -= comma_split(skip).omap{to_sym} if skip
     html_options = add_classes(html_options, "object_table", ("new_record" if this.new_record?))
     editor_tag ||= "edit"
     # force load
     Hobo.models
  %>
  <table merge_attrs="&html_options">
    <if q="&'type'.in?(fields)">
      <tr>
        <td class="field_label"><label>Type:</label></td>
        <td><sti_type_field/></td>
      </tr>        
    </if>


    <% for field in (fields - ['type']) %>
      <% base_name = field.ends_with?("?") ? field[0..-2] : field %>
      <tr>
        <td class="field_label"
            content_option="&base_name + '_label'"><label><%= no_break(field.titleize) %>:</label></td>
        <td><with field="&field">
            <call_tag name="&editor_tag" replace_option="&base_name + '_editor'"/>
        </with></td>
      </tr>
    <% end %>

    <% for field in associations.select{|f| can_view?(this, f)} %>
      <tr>
        <td class="field_label"
            content_option="&field.to_s + '_label'"><label><%= no_break(field.to_s.titleize) %>:</label></td>
        <td><call_tag name="&editor_tag" field="&field" replace_option="&field.to_s + '_editor'"/></td>
      </tr>
    <% end %>

    <tagbody/>

  </table>
</def>


<def tag="has_many_table" attrs="part_id, delete_buttons, headings, id">
  <table_for headings="&headings" merge_attrs="">
    <:empty>
      <p>There are no <%= this_type.klass.name.titleize.pluralize.downcase %></p>
    </:empty>

    <tagbody/>

    <if q="&delete_buttons != false and can_delete?(this)">
      <td><delete_button/></td>
    </if>
  </table_for>
  <div>
    <create_button update="&id || part_id"/>
  </div>
</def>


<def tag="ul_for" attrs="else">
  <if q="&this.empty? && else_">
    <%= else_ %>
  </if>
  <else>
    <ul merge_attrs="">
      <% even_odd = "odd" %>
      <repeat>
        <if_can_view>
          <li class="<%= even_odd %> <%= this_type.name.underscore %>" hobo_model_id="<%= dom_id this %>">
            <%= tagbody.nil? ? object_link : tagbody.call %>
          </li>
        </if_can_view>
        <% even_odd = even_odd == "even" ? "odd" : "even" %>
      </repeat>
    </ul>
  </else>
</def>


<def tag="table_for" attrs="headings, row_class, footer, else">
  <if q="&this.empty? and else_">
    <%= else_ %>
  </if>
  <else>
    <table merge_attrs="">
      <if q="&headings"><tr><%= headings %></tr></if>
      <% even_odd = "odd" %>
      <repeat>
        <if_can_view>
          <tr class="<%= even_odd %> <%= row_class %> <%= this_type.name.underscore %>"
              hobo_model_id="<%= dom_id(this) %>">
            <%= tagbody && tagbody.call %>
          </tr>
        <% even_odd = even_odd == "even" ? "odd" : "even" %>
        </if_can_view>
      </repeat>
      <%= footer %>
    </table>
  </else>
</def>


<def tag="add_by_name" attrs="action_name, add_text, update, part_id">
  <% add_to = this
     refl = this_type
     joins = this_parent.send(refl.through_reflection.name)
     add_name = refl.klass.name.titleize
     action_name ||= "Add #{add_name}"
     add_text ||= "To #{action_name.downcase} #{a_or_an add_name.downcase}, " +
                  "enter its name"
     source = refl.source_reflection.name
  %>
  <tagbody with="&joins"/>
  <with with="&joins.new_without_appending">
    <if_can_create>
       <object_form update="&[update, part_id]" message="&action_name" hidden_fields="*">
         <p>
           <%= add_text %>:
           <belongs_to_autocompleting_field field="&source" where_not_in="&dom_id(add_to)" class="autosubmit"/>
         </p>
       </object_form>
    </if_can_create>
  </with>
</def>


<def tag="spinner">
  <img src="<%= urlb %>/hobothemes/<%= Hobo.current_theme %>/images/spinner.gif" class="hidden" merge_attrs=""/>
</def>


<def tag="image" attrs="src">
  <img src="<%= urlb %>/images/<%= src %>" merge_attrs=""/>
</def>


<def tag="theme_img" attrs="src">
  <img src="<%= theme_asset('images/' + src)%>" merge_attrs=""/>
</def>


<def tag="search_result">
  <div class='search_result'>
    <human_type/>: <object_link/>
  </div>
</def>


<def tag="object_card">
  <div class="object_card">
    <object_link/>
  </div>
</def>


<def tag="section_if">
  <% body = tagbody.call %>
  <%= body.blank? ? "" : section{body} %>
</def>

