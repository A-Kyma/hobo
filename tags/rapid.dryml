<include module="Hobo::RapidHelper"/>

<include src="rapid_support"/>
<include src="rapid_document_tags"/>
<include src="rapid_pages"/>
<include src="rapid_editing"/>
<include src="rapid_forms"/>
<include src="rapid_navigation"/>

<def tag="FieldList" attrs="tag">
  <% tag ||= (this.respond_to?(:new_record?) && this.new_record?) ? "input" : "editor" %>
  <ll merge_attrs="&attributes - attrs_for(:with_field)">
    <with_fields merge_attrs="&attributes & attrs_for(:with_field)">
      <lli>
        <item_label param="#{this_field.sub('?', '')}_label"><%= this_field %></item_label>
        <item_value param="#{this_field.sub('?', '')}_label"><call_tag tag="&tag" /></item_value>
      </lli>
    </with_fields>
  </ll>
</def>


<def tag="UL">
  <ul merge_attrs unless="&this.empty?">
    <repeat>
      <li param if="can_view?" class="#{scope.even_odd} #{this_type.name.underscore}" hobo_model_id="#{dom_id this}">
        <tagbody><view/></tagbody>
      </li>
    </repeat>
  </ul>
</def>


<def tag="Table">
  <table merge_attrs unless="&this.empty?">
    <thead if="&all_parameters[:thead]" param/>
    <tbody>
      <repeat>
        <tr param if="can_view?"
            class="#{scope.even_odd} #{this_type.name.underscore}"
            hobo_model_id="#{dom_id(this)}">
        </tr>
      </repeat>      
    </tbody>
    <tfoot if="&all_parameters[:tfoot]" param/>
  </table>
</def>


<def tag="image" attrs="src">
  <img src="#{base_url}/images/#{src}" merge_attrs/>
</def>


<def tag="spinner">
  <image src="#{base_url}/hobothemes/#{Hobo.current_theme}/images/spinner.gif" class="hidden" merge_attrs/>
</def>


<def tag="theme_image" attrs="src">
  <img src="#{theme_asset('images/' + src)}" merge_attrs/>
</def>


<def tag="card">
  <%= poly = call_polymorphic_tag('card', attributes) %>
  <div class="card" unless="&poly"><human_type/>: <a/></div>
</def>
  

<def tag="hobo_rapid_javascripts" attrs="tiny_mce"><%=
    res = javascript_include_tag("hobo_rapid")
    res += '<script type="text/javascript">'
    unless Hobo.all_controllers.empty?
      res += "var controllerNames = {" +
        Hobo.all_controllers.map {|c| "#{c.singularize}: '#{c}'"}.join(', ') +
        "}; "
    end
    res += "urlBase = '#{base_url}'; hoboPartPage = '#{view_name}'</script>"
    
    if tiny_mce
      res += javascript_include_tag("tiny_mce/tiny_mce_src") + %{
               <script type="text/javascript">
                 tinyMCE.init({ mode: "textareas", editor_selector: "tiny_mce",
                       plugins: 'save',
                       theme_advanced_buttons1 : "bold, italic, separator, " +
                                                 "bullist, outdent, indent, separator, " +
                                                 "undo, redo, separator, link, unlink",
                       theme_advanced_buttons2 : "",
                       theme_advanced_buttons3 : ""
                 });
               </script>}
    end
    res
%></def>


<def tag="name"><%= 
  if this.nil?
    "(not available)"
  else
    name_tag = find_polymorphic_tag("name")
    if name_tag != "name"
      send(name_tag)
    elsif this.is_a?(Array) && this.respond_to?(:proxy_reflection)
      count
    elsif this.is_a? Class and this < ActiveRecord::Base
      this.name.pluralize.titleize
    else
      this.to_s
    end
  end
%></def>


<def tag="a" attrs="view, to, params, resource_type, href"><%=
  content = tagbody.call if tagbody
  
  if href || attributes[:name]
    # Regular link - skip all this stuff
  else
    target = to || this
  
    return "(Not Available)" if target.nil? 
    
    if target.respond_to?(:new_object?) && target.new_object?
      # Link to a new object form
      
      return "" unless begin
                         target.set_creator(current_user) if target.respond_to?(:current_user)
                         can_create?(target)
                       end

      href = object_url(f, "new")
      add_classes!(attributes, "new_#{new.class.name.underscore}_link")
      content ||= "New #{target.name.titleize}"
    else
      # Link to an existing object
      
      return "" unless to ? can_view?(to) : can_view?

      add_classes!(attributes, "#{target.class.name.underscore}_link")
      href = if resource_type
               send("formatted_#{model.to_s.downcase}_url", this, resource_type.downcase)
             else
               object_url(target, view, params)
             end
      attributes[:hobo_model_id] = this_field_dom_id
      content ||= name
    end
  end
  content_tag :a, content, attributes.update(:href => href)
%></def>

        
<def tag="view" attrs="no_wrapper"><%=
  raise HoboError, "view of non-viewable field '#{this_field}' of #{this_parent.typed_id rescue this_parent}" unless
    can_view?
   
   if this == nil
     this_type <= String ? "" : "(Not Available)"
   elsif this_type.respond_to?(:macro)
     if this_type.macro == :belongs_to
       belongs_to_view(attributes)
     elsif this_type.macro == :has_many
       has_many_view(attributes)
     end
   else
     attrs = if !no_wrapper && this_parent.respond_to?(:typed_id)
               attributes.merge(:hobo_model_id => this_field_dom_id)
             else
               attributes
             end
     call_polymorphic_tag("view", attrs) or 
       raise HoboError, "Cannot view: #{this.inspect} (field is #{this_field}, type is #{this.class})"
   end
%></def>

    
<def tag="belongs_to_view"><a/></def>
    
    
<def tag="has_many_view"><%= 
  if this.empty?
    "(none)"
  else
    map_this { a }.join(", ")
  end
%></def>


<def tag="view" for="Date">
  <span merge_attrs><%=
   if respond_to?(:show_date)
     show_date
   else
     this.to_s(:long)
   end %>
   </span>
</def>


<def tag="view" for="Time">
  <span merge_attrs><%=
   if respond_to?(:show_datetime)
     show_datetime
   else
     this.to_s(:long)
   end %>
   </span>
</def>
                       

<def tag="view" for="Numeric">
  <span merge_attrs><%= format ? format % this : this.to_s %></span>
</def>


<def tag="view" for="Hobo::Text">
  <div merge_attrs><%= h(this).gsub("\n", "<br/>") %></div>
</def>


<def tag="view" for="Hobo::HtmlString">
  <div merge_attrs><%= this %></div>
</def>


<def tag="view" for="Hobo::MarkdownString">
  <div merge_attrs><%= markdown(this) %></div>
</def>


<def tag="view" for="Hobo::TextileString">
  <div merge_attrs><%= textilize(this) %></div>
</def>


<def tag="view" for="Hobo::PasswordString">
  <span merge_attrs>[password withheld]</span>
</def>

                       
<def tag="view" for="String">
  <span merge_attrs><%= h(this).gsub("\n", "<br/>") %></span>
</def>

<def tag="view" for="TrueClass"><span merge_attrs>Yes</span></def>
<def tag="view" for="FalseClass"><span merge_attrs>No</span></def>


<def tag="human_type" attrs="style"><%= 
      if can_view?
        res = if this.respond_to? :proxy_reflection
                this.proxy_reflection.klass.name.pluralize
              elsif this.is_a? Class
                this.name
              else
                this.class.name
              end
        res.underscore.humanize.send(style || :titleize)
      end
%></def>


<def tag="count" attrs="label, prefix, unless_none"><%=
  raise Exception.new("asked for count of a string") if this.is_a?(String)
   
  if this.is_a?(Class) and this < ActiveRecord::Base
    c = this.count
    label ||= this.name.titleize
  else
    label ||= this.respond_to?(:proxy_reflection) && this.proxy_reflection.name.to_s.singularize.titleize
    c = if this.is_a?(Fixnum)
          this
        elsif this.respond_to?(:count)
          this.count
        else
          this.length
        end
  end
   
  Dryml.last_if = c > 0 if unless_none
  if unless_none && c == 0
    ""
  else
    main = label.blank? ? c : pluralize(c, l)
   
    if prefix.in? %w(are is)
      p = c == 1 ? "is" : "are"
      p + ' ' + main
    else
      main
    end
  end
%></def>


<def tag="theme_stylesheet">
  <link href="<%= base_url %>/hobothemes/<%= Hobo.current_theme %>/stylesheets/application.css"
        media="screen" rel="Stylesheet" type="text/css" />
</def>


<def tag="clearer"><div class='clearer'>&nbsp;</div></def>


<!-- The Tags defined below here are a bit rough and will be improved
in the future - use at your own risk. -->

<def tag="has_many_table" attrs="part_id, delete_buttons, headings, id">
  <table_for headings="&headings" merge_attrs="&true">

    <tagbody/>

    <if test="&delete_buttons != false and can_delete?(this)">
      <td><DeleteButton/></td>
    </if>
  </table_for>
  <else>
    <p>There are no <%= this_type.klass.name.titleize.pluralize.downcase %></p>
  </else>
  <div>
    <CreateButton update="&id || part_id"/>
  </div>
</def>


<def tag="add_by_name" attrs="action_name, add_text, update, part_id">
  <% add_to = this
     refl = this_type
     joins = this_parent.send(refl.through_reflection.name)
     add_name = refl.klass.name.titleize
     action_name ||= "Add #{add_name}"
     add_text ||= "To #{action_name.downcase} #{a_or_an add_name.downcase}, " +
                  "enter its name"
     source = refl.source_reflection.name
  %>
  <tagbody with="&joins"/>
  <with with="&joins.new_without_appending">
    <if_can_create>
       <object_form update="&[update, part_id]" message="&action_name" hidden_fields="*">
         <p>
           <%= add_text %>:
           <belongs_to_autocompleting_field field="&source" where_not_in="&dom_id(add_to)" class="autosubmit"/>
         </p>
       </object_form>
    </if_can_create>
  </with>
</def>


