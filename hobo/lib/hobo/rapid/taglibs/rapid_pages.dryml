<!-- Rapid-Pages provides tags for working with entire pages. It includes various supporting tags for things such as stylesheet and javascript includes. Also defines the standard error pages for permission-denied and not-found.
-->

<!-- nodoc. -->
<def tag="index-page" polymorphic/>
<!-- nodoc. -->
<def tag="new-page"   polymorphic/>
<!-- nodoc. -->
<def tag="show-page"  polymorphic/>
<!-- nodoc. -->
<def tag="edit-page"  polymorphic/>

<!-- The page rendered by default in the case of a permission-denied error

### Attributes

 - `message` - The main message to display. Defaults to "That operation is not allowed"

  -->
<def tag="permission-denied-page" attrs="message">
  <% message ||= "That operation is not allowed" %>
  <page merge>
    <body: class="permission-denied"/>
    <content: param>
      <header param="content-header">
        <h2 param="heading"><message/></h2>
        <div class="debug" if="&Rails.env.development?">
          <h3>Exception:</h3>
          <pre><%= h @permission_error.pretty_inspect %></pre>
          <h3>params:</h3>
          <pre><%= h params.pretty_inspect %></pre>
        </div>
      </header>
    </content:>
  </page>
</def>


<!-- The page rendered by default in the case of a not-found error

### Attributes

 - `message` - The main message to display. Defaults to "The page you requested cannot be found."

  -->
<def tag="not-found-page" attrs="message">
  <% message ||= t("hobo.messages.not_found", :default=>["The page you requested cannot be found."]) %>
  <page merge>
    <body: class="not-found"/>
    <content: param>
      <header param="content-header">
        <h2 param="heading"><message/></h2>
      </header>
    </content:>
  </page>
</def>


<!-- Renders one of five HTML DOCTYPE declarations, according to the `version` attribute.

### Attributes
 - 'version' - the doctype version, must be one of:

   - HTML 4.01 STRICT
   - HTML 4.01 TRANSITIONAL
   - XHTML 1.0 STRICT
   - XHTML 1.0 TRANSITIONAL
   - XHTML 1.1

See the source for the actual output

 -->
<def tag="doctype" attrs="version"><%=raw(
  case version.upcase
    when "HTML 4.01 STRICT"
      '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" ' +
        '"http://www.w3.org/TR/html4/strict.dtd">'
    when "HTML 4.01 TRANSITIONAL"
      '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" ' +
        '"http://www.w3.org/TR/html4/loose.dtd">'
    when "XHTML 1.0 STRICT"
      '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" ' +
        '"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">'
    when "XHTML 1.0 TRANSITIONAL"
      '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" ' +
        '"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">'
    when "XHTML 1.1"
      '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" ' +
        '"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">'
  end)
%></def>


<!-- Renders an `<html>` tag along with the DOCTYPE specified in the `doctype` attribute.

### Attributes

 - `doctype` - the version of the DOCTYPE required. See the `version` attribute to `<doctype>`
 -->
<def tag="html" attrs="doctype">
  <% doctype ||= 'XHTML 1.0 TRANSITIONAL' -%>
  <doctype version="&doctype"/>
  <% attributes.reverse_merge!(:xmlns => "http://www.w3.org/1999/xhtml") if doctype.upcase =~ /^XHTML/ -%>
  <%=raw "<html#{tag_options(attributes, true)}>" %>
    <set-scoped xmldoctype="&doctype.upcase =~ /^XHTML/"><do param="default"/></set-scoped>
  <%=raw "</html>" %>
</def>

<!-- empty tags should be written as <br> in HTML and <br /> in XHTML -->
<!-- nodoc. -->
<def tag="empty-tag" attrs="tag-name"><%= element(tag_name, attributes, nil, true, true) %></def>
<!-- nodoc. -->
<def tag="base"><empty-tag tag-name="base" merge/></def>
<!-- nodoc. -->
<def tag="meta"><empty-tag tag-name="meta" merge/></def>
<!-- nodoc. -->
<def tag="link"><empty-tag tag-name="link" merge/></def>
<!-- nodoc. -->
<def tag="img"><empty-tag tag-name="img" merge/></def>
<!-- nodoc. -->
<def tag="br"><empty-tag tag-name="br" merge/></def>
<!-- nodoc. -->
<def tag="hr"><empty-tag tag-name="hr" merge/></def>
<!-- nodoc. -->
<def tag="frame"><empty-tag tag-name="frame" merge/></def>
<!-- nodoc. -->
<def tag="area"><empty-tag tag-name="area" merge/></def>
<!-- nodoc. -->
<def tag="param"><empty-tag tag-name="param" merge/></def>
<!-- nodoc. -->
<def tag="col"><empty-tag tag-name="col" merge/></def>


<!-- Renders a conditional comment in order to have some content ignored by all browsers other than Internet Explorer

### Example


    <if-ie version="lt IE 7"> ... </if-ie>

 -->
<def tag="if-ie" attrs="version">
  <%=raw "<!--[if #{version || 'IE'}]>" %><do param="default"/><%=raw "<![endif]-->" %>
</def>

<!-- Simple wrapper for the `stylesheet_link_tag` helper. The `name` attribute can be a comma-separated list of stylesheet names.
 -->
<def tag="stylesheet" attrs="name">
  <%= stylesheet_link_tag *(comma_split(name) + [deunderscore_attributes(attributes)]) %>
</def>


<!-- Simple wrapper for the `javascript_include_tag` helper. The `name` attribute can be a comma-separated list of script file names.
 -->
<def tag="javascript" attrs="name">
  <if test="&name.is_a?(Symbol)">
    <%= javascript_include_tag name %>
  </if>
  <else>
    <repeat with="&comma_split(name)">
      <%= javascript_include_tag this %>
    </repeat>
  </else>
</def>


<!-- Renders a Rails flash message wrapped in a `<div>` tag

### Attributes

 - `type` - which flash message to display. Defaults to `:notice`

### CSS Classes

The flash is output in a `<div class="flash notice">`, where `notice` is the `type` specified.

  -->
<def tag="flash-message" attrs="type">
  <% type = type ? type.to_sym : :notice -%>
  <div class="flash #{type}" if="&flash[type]" merge-attrs><%= flash[type] %></div>
</def>


<!-- Renders `<flash-message>` for every flash type given in the `names` attribute (comma separated), or for all flash messages that have been set if `names` is not given -->
<def tag="flash-messages" attrs="names"><%=
  scope.flash_rendered = true if scope.respond_to? :flash_rendered
  names = names.nil? ? flash.keys : comma_split(names)
  names.map { |name| flash_message :type => name }.safe_join
%></def>

<!-- Renders `<div id="ajax-progress"><div><span id="ajax-progress-text"></span></div></div>`.  -->
<def tag="ajax-progress">
  <div id="ajax-progress" class="ajax-progress" merge-attrs>
    <div>
      <span id="ajax-progress-text"></span>
    </div>
  </div>
</def>
