<!-- Rapid i18n provides tags related with the Rails-I18n project -->

<!-- Wrapper around ActiveModel::Name#human

#### Attributes

 - model - (optional) should be a model class or a record object (default to this)
 - count - (optional) used to pick the inflected string for the model. It should be an integer.
 -->
<def tag="model-name-human" attrs="model, count"><%=
  model ||= this
  model = model.class unless model.kind_of? Class
  # prepare symbolized attributes for merging
  attrs = {}
  all_attributes.each_pair{|k,v| attrs[k.to_sym] = v}
  model.model_name.human( attrs )
%>
</def>


<!-- Wrapper around ActiveRecord::Base.human_attribute_name.

#### Attributes

 - attribute - the attribute to lookup
 - model - (optional) should be a model class or a record object (default to this)
 - count - (optional) should be an integer

 -->
<def tag="human-attribute-name" attrs="attribute, model"><%=
  model ||= this
  model = model.class unless model.kind_of? Class
  # prepare symbolized attributes for merging
  attrs = {}
  all_attributes.each_pair{|k,v| attrs[k.to_sym] = v}
  model.human_attribute_name( attribute.to_sym, attrs )
%>
</def>

<!-- Used to localize and pluralize collection names.
A collection name is a special case of an attribute name, (indeed you should store the collection names as attribute names in the locale files), so this tag internally uses human_attribute_name to return them.

With the `your` attribute and in the special case the context is a Hobo::Model::UserMixin instance it automatically embeds the `your` tag funtionality. (note: :name is added by default as an interpolable variable)

### Attributes

 - collection - the attribute/collection key to lookup in the `activerecord.attributes` namespace. (e.g. 'roles')
 - count - used to pick the inflected string for the collection. It should be an integer.
 - your - wraps the collection name in a `Your` tag

### Example


    it:
      activerecord:
        attributes:
          post:
            comments:
              one: "Commento"
              other: "Commenti"
          user:
            roles:
              one: "Ruolo"
              other: "Ruoli"
      tags:
        your:
          roles:
            current_user:
              one: "Il tuo Ruolo"
              other: "I tuoi Ruoli"
            other_user:
              one: "Ruolo di {{name}}"
              other: Ruoli di {{name}}"

  context is a Post instance ('your' is ignored)

    <human-collection-name collection="comments" count="&user.comments.count" your/>
    I18n.locale = :en => "Comment" or "Comments"
    I18n.locale = :it => "Commento" or "Commenti"

  context is a User instance

    <human-collection-name collection="roles' count="&user.roles.count" your/>
    I18n.locale = :en => "Your Role" or "Jim's Role" or "Your Roles" or "Jim's Roles"
    I18n.locale = :it => "Il tuo Ruolo" or "Il Ruolo di Jim" or "I tuoi Ruoli" or "I Ruoli di Jim"

  (output is the same as `<Your key="roles" count=>"&user.roles.count"/>`)

    <human-collection-name collection="roles" count="&user.roles.count"/>
    I18n.locale = :en => "Role" or "Roles"
    I18n.locale = :it => "Ruolo" or "Ruoli"
-->
<def tag="human-collection-name" attrs="collection, count, your"><%
  raise Hobo::Error, "The 'collection' attribute must be defined" if collection.blank?
  belong_class = this.kind_of?(Class) ? this : this.class
  raise Hobo::Error, "The context is not an ActiveRecord::Base instance or class. (this = #{this.typed_id rescue this.inspect})" unless belong_class < ActiveRecord::Base
  # prepare symbolized attributes for merging
  attrs = {}
  all_attributes.each_pair{|k,v| attrs[k.to_sym] = v} -%>
<% if your && belong_class < Hobo::Model::UserBase && this.kind_of?(Hobo::Model::UserBase) && I18n.locale == :en -%>
    <your key="&collection" merge-attrs="&{:name=>name(:no_wrapper => true)}.merge(attrs)" capitalize>
      <%= belong_class.human_attribute_name(collection.to_sym, attrs) %>
    </your>
<% else -%>
    <%= belong_class.human_attribute_name( collection.to_sym, attrs ) %>
<% end %>
</def>

<!-- nodoc -->
<def tag="fakedef">
</def>

<!-- Simple wrapper around I18n.t.

The tag content is used as the :default option. It is overridden by an explicit 'default' attribute.
There is a default :count => 1.

### Attributes

 - key: the key to lookup
 - all the attributes accepted by the wrapped method -->
<fakedef tag="t" attrs="key">
<!-- actually defined in i18n.rb -->
</fakedef>

<!--
Wrapper around the Rails :translate helper with hobo added features.

It can be used as a regular helper or as a dryml tag.

### Hobo Added Features

`ht` adds some conventions for easier hobo translation.

1. Assumes the first part of the key to be a model name (e.g.: users.index.title -> user)
2. Tries to translate the model by lookup for: (e.g.: user-> activerecord.models.user)
3. Adds a default fallback to the beginning of the fallback chain by replacing the first part of the key with "hobo" and using the translated model name as additional attribute. This allows us to have default translations (e.g.: hobo.index.title: "{{model}} Index")

You can also pass any other :translate option like for example :count.

Is also used as a tag in the dryml-view files. The syntax is:

      <ht key="my.app">My Application</ht>

Will lookup the "my.app"-key for your locale and replaces the "My Application" content if found.

      <ht key="my" app="Program">My Application</ht>

Will look up both the "my"- and "app"-key for your locale, and replaces the "My Application" with the "my"-key contents (interpolated using the "app"-key.

sample.no.yml-file:

      "no":
        my: "Mitt {{app}}"

The output should be: Mitt Program

Another example:

    <%= ht :key=>'user.index.title', :default=>'Index'  %>
    <ht key="user.index.title">Index</ht>
    #=> "Index" # if "user.index.title" or "hobo.index.title" is not found
    #=> "User Index" # with the below en.yml file

    === en.yml ===
    en:
      hobo:
        index:
          title: %{model} Index
-->
<fakedef tag="ht">
<!-- actually defined in translations.rb -->
</fakedef>
