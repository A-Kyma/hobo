<def tag="hidden-fields" attrs="fields, for-query-string, skip"><%= 
  pairs = if for_query_string
            query_params.to_a
          else
            hiddens = case fields
                      when '*', nil
                        # TODO: Need a better (i.e. extensible) way to eleminate certain fields
                        this.class.column_names - ['type', 'created_at', 'updated_at'] - comma_split(skip)
                      else
                        comma_split(fields)
                      end
            hiddens.map do |field| 
              val = this.send(field)
              param_name = param_name_for(form_this, form_field_path + [field])
              [param_name, val] unless val.nil? || 
                                       field.to_sym.in?(this.class.attr_protected) || 
                                       (this.new_record? && val == this.class.column(field).default)
            end.compact
          end
  pairs.map { |n, v| hidden_field_tag(n, v.to_s) if v && n.not_in?(scope.form_field_names) }.compact.join("\n")
%></def>


<def tag="form" polymorphic attrs="update, hidden-fields, action, method, web-method, lifecycle, owner, multipart"><%= 
  ajax_attrs, html_attrs = attributes.partition_hash(Hobo::RapidHelper::AJAX_ATTRS)
  html_attrs[:enctype] ||= "multipart/form-data" if multipart
   
  new_record = this.try.new_record?

  method = if method.nil?
             (action || web_method || new_record) ? "post" : "put"
           else
             method.downcase
           end

  html_attrs[:action] = action || begin
     target = if owner
                collection_name = this.class.reverse_reflection(owner).name
                this.send(owner).send(collection_name)
              else
                this
              end
     action = web_method || lifecycle
     object_url(target, action, :method => method)
   end
   
  if action.nil? && (html_attrs[:action].nil? ||
                     (lifecycle.nil? && new_record && !this.user_can_create?(current_user)) ||
                     (lifecycle.nil? && !new_record && !can_edit?))
    Hobo::Dryml.last_if = false
    ""
  else
    if method == "put"
      # browsers don't support put -- use post and add the Rails _method hack
      http_method_hidden = hidden_field_tag("_method", "PUT") 
      html_attrs[:method] = "post" 
    else
      html_attrs[:method] = method
    end
     
    if update || !ajax_attrs.empty?
      # add an onsubmit to convert to an ajax form if `update` is given
      function = ajax_updater(:post_form, update, ajax_attrs)
      html_attrs[:onsubmit] = [html_attrs[:onsubmit], "#{function}; return false;"].compact.join("; ")
    end
     
    hiddens = nil
    body = with_form_context do
      # It is important to evaluate parameters.default first, in order to populate scope.form_field_names
      b = parameters.default
      hiddens = self.hidden_fields(:fields => hidden_fields) if new_record
      b
    end
     
    auth_token = if method.nil? || method == 'get' || request_forgery_protection_token.nil?
                   ''
                 else
                   element(:input, {:type => "hidden", 
                           :name => request_forgery_protection_token.to_s,
                           :value => form_authenticity_token}, nil, true, true)
                 end
     
    unless method == "get"
      page_path = if (request.post? || request.put?) && params[:page_path]
                    params[:page_path]
                  else
                    view_name.sub(Hobo::Dryml::EMPTY_PAGE, params[:action])
                  end
      page_path_hidden = hidden_field_tag("page_path", page_path) 
    end
    
    hiddens_div = element(:div, {:class => "hidden-fields"}, [http_method_hidden, page_path_hidden, auth_token, hiddens].join)
     
    body = [hiddens_div, body].join
    
    if action.nil? # don't add automatic css classes if the action was specified
      if web_method
        add_classes!(html_attrs, "#{type_id.dasherize}-#{web_method}-form")
      else
        add_classes!(html_attrs, "#{'new-' if new_record}#{type_id.dasherize}")
      end
    end

    Hobo::Dryml.last_if = true
    element("form", html_attrs, body)
  end
%></def>


<def tag="submit" attrs="label, image">
  <input if="&image" type="image" src="&image" merge-attrs class="image-button submit-button"/>
  <else>
    <input type="submit" value="#{label}" merge-attrs class="button submit-button"/>
  </else>
</def>


<def tag="input" attrs="force"><%=     
  if attributes[:type]
    element :input, attributes, nil, true, true
  elsif !(force || can_edit?)
    view
  else
    attrs = add_classes(attributes, type_id.dasherize, type_and_field.dasherize)
    attrs[:name] ||= param_name_for_this
    the_input = if (refl = this_field_reflection)
                  if refl.macro == :belongs_to
                    call_polymorphic_tag('input', attrs) or select_one(attrs)
                  elsif refl.macro == :has_many
                    if refl.options[:through]
                      select_many(attrs)
                    else
                      raise NotImlementedError, "An input for has-many associations has not been implemented yet"
                    end
                  end
                else
                  call_polymorphic_tag('input', attrs) or
                    (call_polymorphic_tag('input', HoboFields.to_class(this_type::COLUMN_TYPE), attrs) if defined?(this_type::COLUMN_TYPE)) or
                    raise HoboError, ("No input tag for #{this_field}:#{this_type} (this=#{this.inspect})")
                end
    if this_parent.errors[this_field]
      "<span class='field-with-errors'>#{the_input}</span>"
    else
      the_input
    end
  end
%></def>


<def tag="input" for="text" attrs="name">
  <%= text_area_tag(name, this, attributes) %>
</def>

<def tag="input" for="boolean" attrs="name">
  <%= check_box_tag(name, '1', this, attributes) + hidden_field_tag(name, '0') %>
</def>
  
<def tag="input" for="password" attrs="name">
  <%= password_field_tag(name, this, attributes) %>
</def>

<def tag="input" for="date" attrs="order">
  <% order = order.nil? ? [:year, :month, :day] : comma_split(order).*.to_sym -%>
  <%= select_date(this || Time.now, attributes.merge(:prefix => param_name_for_this, :order => order)) %>
</def>

<def tag="input" for="time" attrs="order">
  <% order = order.nil? ? [:year, :month, :day, :hour, :minute, :second] : comma_split(order).*.to_sym -%>
  <%= select_date(this || Time.now, attributes.merge(:prefix => param_name_for_this, :order => order)) %>
</def>

<def tag="input" for="datetime" attrs="order">
  <% order = order.nil? ? [:year, :month, :day, :hour, :minute, :second] : comma_split(order).*.to_sym -%>
  <%= select_datetime(this || Time.now, attributes.merge(:prefix => param_name_for_this, :order => order)) %>
</def>

<def tag="input" for="integer" attrs="name">
  <%= text_field_tag(name, this, attributes) %>
</def>

<def tag="input" for="float" attrs="name">
  <%= text_field_tag(name, this, attributes) %>
</def>

<def tag="input" for="string" attrs="name">
  <%= text_field_tag(name, this, attributes) %>
</def>

<def tag="input" for="big_integer" attrs="name">
  <%= text_field_tag(name, this, attributes) %>
</def>

<def tag="input" for="HoboFields::EnumString" attrs="labels, titleize"><%
  labels ||= {}
  titleize = true if titleize.nil?
  options = this_type.values.map {|v| [labels.fetch(v.to_sym, titleize ? v.titleize : v), v] }
  %>
  <select name="#{param_name_for_this}" merge-attrs>
    <%= options_for_select(options, this) %>
  </select>
</def>


<!-- Buttons -->

<def tag="remote-method-button" attrs="method, update, label, confirm"><%= 
  ajax_attributes, html_attributes = attributes.partition_hash(Hobo::RapidHelper::AJAX_ATTRS)

  url = object_url(this, method, :method => :post)
  add_classes!(html_attributes, "button remote-method-button #{method}-button")
  label ||= method.titleize
  if update || !ajax_attributes.empty?
    ajax_attributes[:message] ||= label
    func = ajax_updater(url, update, ajax_attributes.merge(:confirm => confirm))
    html_attributes.update(:onclick => "var e = this; " + func, :type =>'button', :value => label)
    element(:input, html_attributes, nil, true, true)
  else
    button_to(label, url, html_attributes.merge(:confirm => confirm))
  end
%></def>
  

<def tag="update-button" attrs="label, update, fields, params"><%=
   raise HoboError.new("no update specified") unless update

   ajax_attributes, html_attributes = attributes.partition_hash(Hobo::RapidHelper::AJAX_ATTRS)
   params = (params || {}).merge(this.class.name.underscore => fields)
   ajax_attributes.reverse_merge!(:message => label, :params => params, :method => :put)
   func = ajax_updater(object_url(this), update, ajax_attributes)
   html_attributes.reverse_merge!(:type =>'button', :onclick => func, :value => label)
   
   element :input, add_classes(html_attributes, "button update-button update-#{this.class.name.underscore}-button"), nil, true, true %>
</def>


<def tag="delete-button" attrs="label, update, in-place, image, confirm, fade, subsite"><%=
  in_place = false if in_place.nil? && this == @this && !request.xhr?
  url = object_url(this, :method => :delete, :subsite => subsite)
  if (Hobo::Dryml.last_if = url && can_delete?)
    attributes = attributes.merge(if image
                                    { :type => "image", :src => "#{base_url}/images/#{image}" }
                                  else
                                    { :type => "button" }
                                  end)
    label ||= "Remove"
    confirm = "Are you sure?" if confirm.nil?
    
    add_classes!(attributes,
                 image ? "image-button" : "button",
                 "delete-button delete-#{this.class.name.underscore.dasherize}-button")
    if url
      if in_place == false
        attributes[:confirm] = confirm if confirm
        attributes[:method] = :delete
        button_to(label, url, attributes)
      else
        fade = true if fade.nil?
        attributes[:value] = label
        attributes[:onclick] = "Hobo.removeButton(this, '#{url}', #{js_updates(update)}, {fade:#{fade}, confirm: #{confirm.inspect}})"
        element(:input, attributes, nil, true, true)
      end
    end
  else
    ""
  end
%></def>


<def tag="create-button" attrs="model, update, label, fields, message"><%=
  raise HoboError.new("no update specified") unless update

  fields ||= {}
  class_or_assoc = if model
                     model.is_a?(String) ? model.constantize : model
                   elsif Hobo.simple_has_many_association?(this)
                     fields[this_field_reflection.primary_key_name] = this.proxy_owner.id
                     this
                   else
                     raise HoboError.new("invalid context for <create-button>")
                   end
  new = class_or_assoc.new(fields)
  new.set_creator(current_user)
  if can_create?(new)
    label ||= "New #{new.class.name.titleize}"
    ajax_attributes = { :message => message }
    class_name = new.class.name.underscore
    ajax_attributes[:params] = { class_name => fields } unless fields.empty?
    func = ajax_updater(object_url(new.class, :method => :post), update, ajax_attributes)
    element :input, add_classes(attributes.merge(:type =>'button', :onclick => func, :value => label),
                                "button create-button create-#{class_name}-button"), nil, true, true
  end
%></def>


<def tag="select-one" attrs="include-none, blank-message, options, sort"><%
  raise HoboError.new("Not allowed to edit") unless can_edit?
   
  blank_message ||= "(No #{this_type.name.to_s.titleize})"
  conditions = ActiveRecord::Associations::BelongsToAssociation.new(this_parent, this_field_reflection).conditions
  options ||= this_field_reflection.klass.all(:conditions => conditions).select {|x| can_view?(x)}
    #Todo: switch to autocompleter for id_name when too many records, and id_name supported
  select_options = options.map { |x|
            [ name(:with => x, :no_wrapper => true), x.id ]
          }
  select_options = select_options.sort if sort
  select_options.insert(0, [blank_message, ""]) if include_none || (this.nil? && include_none != false)
  attributes = add_classes(attributes, "input", "belongs_to", type_and_field)
  %>
  <select name="#{param_name_for_this(true)}" merge-attrs="&attributes.except :name">
    <%= options_for_select(select_options, this ? this.id : "") %>
  </select>
</def>


<def tag="name-one" attrs="complete-target, completer"><%
  complete_target ||= this_field_reflection.klass
  completer ||= (complete_target.is_a?(Class) ? complete_target : complete_target.class).name_attribute
%>
  <input type="text" name="#{param_name_for_this}" 
         class="autocompleter #{type_and_field} complete-on:#{dom_id complete_target}:#{completer}"
         value="&name :no_wrapper => true, :if_present => true"
         merge-attrs/>
  <div class="completions-popup" style="display:none"></div>
</def>


<def tag="sti-type-input">
  <select name="#{param_name_for(form_this, form_field_path + ['type'])}">
    <%= options_for_select(this.class.send(:subclasses).map{|x| [x.name.titleize, x.name]}, this.class.name) %>
  </select>
</def>

      
<def tag="select-input">
  <select-menu name="#{param_name_for_this}" selected="&this" merge/>
</def>

      
<def tag="error-messages">
  <section class="error-messages" merge-attrs if="&this.errors.length > 0">
    <h2 param="heading">To proceed please correct the following:</h2>
    <ul param>
      <% this.errors.each do |attr, message|; next if message == "..." %>
        <li param><%= attr.titleize %> <%= message %></li>
      <% end %>
    </ul>
  </section>
</def>


<def tag="select-many" attrs="options, targets, remove-label, prompt">
  <%
  prompt ||= "Add #{a_or_an(:word => this_field.titleize.singularize)}"
  options ||= this.member_class.all
  values = this
  %>
  <div class="input select-many" merge-attrs>
    <div style="display:none" class="item-proto">
      <div class="item" param="proto-item">
        <span></span>
        <input type="hidden" name="#{param_name_for_this}[]" param="proto-hidden"/>
        <input type="button" class="remove-item" value="#{remove_label || 'Remove'}" param="proto-remove-button"/>
      </div>
    </div>
    <div class="items">
      <set param-name="&param_name_for_this"/>
      <repeat>
        <div class="item" param="item">
          <span><name/></span>
          <input type="hidden" name="#{param_name}[]" value="#{name :no_wrapper => true}" param="hidden"/>
          <input type="button" class="remove-item" value="#{remove_label || 'Remove'}" param="remove-button"/>
        </div>
      </repeat>
    </div>
    <select>
      <option value=""><prompt/></option>
      <option repeat="&options.sort_by {|x| name(:no_wrapper => true, :with => x).downcase}" 
              merge-attrs="&{:disabled => 'true'} if this.in?(values)"><name no-wrapper/></option>
    </select>
  </div>
</def>


<def tag="after-submit" attrs="uri, stay-here, go-back">
  <% uri = "stay-here" if stay_here %>
  <% uri = session[:previous_uri] if go_back %>
  <input type="hidden" value="&params[:after_submit] || uri" name="after_submit" if="&uri"/>
</def>


<def tag="select-menu" attrs="options, selected, first-option, first-value">
  <select merge-attrs param="default">
    <option value="#{first_value}" unless="&first_option.nil?"><first-option/></option>
    <do param="options"><% options_for_select(options, selected.to_s) %></do>
  </select>
</def>


<def tag="hidden-id-field">
  <if:id><input type="hidden" name="#{param_name_for_this}" value="#{this}" /></if>
</def>


<def tag="input-many">
  <set empty="&this.empty?"/>
  <% this.push(this.member_class.new) if empty # temporarily add a blank item, remove below %>
  <ul class="input-many #{this_field.dasherize} input-many-prefix:#{param_name_for_this}">
    <li repeat class="#{'record-with-errors' unless this.errors.empty?}">
      <error-messages without-heading class="sub-record"/>
      <hidden-id-field/>
      <div class="input-many-item" param="default"/>
      <div class="buttons">
        <button class="remove-item" unless="&this_parent.length == 1">-</button>
        <button class="add-item" if="&last_item?">+</button>
      </div>
    </li>
  </ul>
  <% this.pop if empty %>
</def>


<def tag="input-all">
  <% association_fkey = this_field_reflection.primary_key_name %>
  <ul class="input-all #{this_field.dasherize}">
    <li repeat class="#{'record-with-errors' unless this.errors.empty?}">
      <set-scoped form-field-names="&[]">
        <hidden-id-field/>
        <do param="default"/>
        <hidden-fields skip="&association_fkey"/>
      </set-scoped>
    </li>
  </ul>
</def>


















