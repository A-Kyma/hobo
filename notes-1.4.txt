## Retention of Prototype

So far it has been easy to retain support for prototype.js in the Ruby part of Hobo.   If this continues, the plan will be to release a combination of a version of Hobo (1.3.1, perhaps) along with a version of the Hobo-jQuery plugin that works without prototype.  This will give users a two-step migration path to 1.4 -- they can migrate to jQuery first, and then to 1.4.

The current plan is also to drop prototype.js support in Hobo 1.4.   It could be maintained if there was sufficient demand, but we don't believe that the demand is there.

## Framework Agnosticism

jQuery support is being written in a manner that should make it easier to support other frameworks if we ever decide to do so.   Basically all this means is that we're annotating our HTML and the javascript is picking up the information from the annotations rather than calling functions or setting variables.

## Unobtrusiveness

The agnosticism is a side benefit -- really the main reason its written this way is so that we're coding using "unobtrusive javascript" techniques.

Hobo currently many different mechanisms to pass data to javascript:

- classdata ex class="model::story:2"
- non-HTML5-compliant element attributes: ex hobo-blank-message="(click to edit)"
- variable assignment: ex hoboParts = ...;
- function calls: ex onclick="Hobo.ajaxRequest(url, {spinnerNextTo: 'foo'})"

hobo-jquery currently uses JSON inside of comments:

    <!-- json_annotation ({"tag":"datepicker","options":{},"events":{}}); -->

We are switching all 5 of these mechanisms to use HTML5 data
attributes.  HTML5 data attributes are technically illegal in HTML4
but work in all browsers future and past (even IE6).  The illegality
of them is the reason that I didn't choose them in Hobo-jQuery, but
it's now 2011.

We use a single attribute: `data-rapid`.  This is a JSON hash where
the keys are the tag names and the values are options hashes.   DRYML
has been modified to appropriately merge this tag in a fashion similar
to what it currently does for the `class` tag.

## Compatibility

Obviously compatibitlity with hobo-rapid.js is not going to be maintained, since that's written in prototype.

However, I have also not put a strong emphasis on maintaining compatibility with the existing hobo-jquery.js code.   Many people use hobo-jquery's DRYML interfaces, but I don't believe that many people use its javascript interfaces.   I'm not changing things for no reason, but I am refactoring the code and internal interfaces as I go along.

## Enhancements

### multiple parts

I've updated DRYML so that it emits a different DOM ID if you re-instantiate a part.   (The first use of a part retains the DOM ID=partname convention for backwards compatibility)  "update=" requires a DOM ID, so I've also added 2 new AJAX attributes that can be used instead of "update=".

The first one is "updates=".  (name TBD).  Instead of a comma separated list of DOM ID's, it takes a CSS selector.

The other one is "ajax".  (name TBD).   If used inside of a part, it
indicates that part should be updated.   If used outside of a part,
AJAX will be used but no parts will be updated.

These three Ajax attributes may be used simultaneously.

Example:

    <collection:stories>
       <div part="inner">
          <form ajax>
             <input:title/>
          </form>
       </div>
     </collection>

### allowing errors in parts

Older versions of Hobo did not render a part update if the update did
not pass validation.

This behaviour may now be overridden by using the 'errors-ok'
attribute on your form.  (or formlet or whatever other tag initiates
the Ajax call).

The 'errors-ok' attribute is processed 

### AJAX file uploads

If you have malsup's form plugin installed, Ajax file uploads should
"just work", as long as you have debug_rjs turned off in your
config/initiailizers/development.rb.

### AJAX events

The standard 'before', 'success', 'done' and 'error' callbacks may
still be used.   Additionally, the AJAX code now triggers
'rapid:ajax:before', 'rapid:ajax:success', 'rapid:ajax:done' and
'rapid:ajax:error' events to unable you to code more unobtrusively.

Due to the difficulty of catching events on elements that have
disappeared because they've been replaced, the 'rapid:ajax:success'
and 'rapid:ajax:done' events are triggered on the document rather than
on the element that triggered them.

      $(document).ready(function() {
         jQuery(document).on("rapid:ajax:success", function(event, el) {
            // `this` is the document and `el` is the form
            alert('success');
         });
      });

### before callback

A new callback has been added to the list of Ajax Callbacks: before.
This callback fires before any Ajax is done.   If you return false
from this, the Ajax is cancelled.  So you should probably ensure you
explicitly return true if you use it and don't want your ajax
cancelled.

### callbacks

Normally in HTML you can attach either a snippet of javascript or a
function to a callback.

    <button onclick=fbar/>

This doesn't work in DRYML because the function is not defined in
Ruby, it's only defined in Javascript.

In Hobo 1.3 you would thus be forced to do this to get equivalent behaviour:

    <form update="foo" success="return fbar.call(this);"/>

Now you can just return the function name:

    <form ajax success="fbar"/>

### hjq-datepicker

hjq-datepicker now automatically sets dateFormat to the value
specified in your translations:  (I18n.t :"date.formats.default").

## Editors

Editors are no longer special-cased, they now use the standard DRYML
part mechanism.

There are two types of editors: `<click-editor>` and `<live-editor>`.
click-editor is the click-to-edit type of control similar to what
Rapid currently uses for a string, and live-editor always renders the
input, and is similar to what Rapid currently uses for Boolean's and
enum-strings.

    <!--
    An in-place-editor type control.  Displays the `view` view of a field
    until it's clicked on, when it switches to the `input` view.  Onchange
    the field is saved via Ajax, and onblur the view switches back to the
    `view` view.

    Due to the way the DRYML part system works, `<click-editor>` may not
    be parameterized.  If you wish to parameterize it, see
    `<click-editor-innards>`.
    -->
    <def tag='click-editor'>
      <div part="editor-part">
        <click-editor-innards/>
      </div>
    </def>

    <!--
    When placed inside of a part, provides a complete parameterizable `<click-editor>`.

    ### Usage

        <part name="my-part">
          <click-editor-innards>
            <before-view:>My</before-view:>
            <view: replace>
              My <view restore/>
            </view: replace>
          </click-editor-innads>
        </part>

    ### Attributes

    blank-message: the message to display if the field is blank.  Note
    that you're probably better off changing this via translations
    (hobo.in_place_editor.click_to_edit).

    -->
    <def tag='click-editor-innards' attrs="blank-message">
      <% blank_message ||= t('hobo.in_place_editor.click_to_edit', :default => '(click to edit)') %>
        <if>
          <view class="in-place-edit hidden" data-rapid="&data_rapid(:click_editor)" param/>
        </if>
        <else>
          <view with="&blank_message" class="in-place-edit hidden" data-rapid="&data_rapid(:click_editor)" param="blank-view"/>
        </else>
        <set my-field="&this_field"/>
        <formlet with="&this_parent" class="in-place-form" ajax errors-ok param>
          <error-messages param/><%# TODO: replace with something more compact, maybe even transient %>
          <input field="&my_field" param/>
        </formlet>
    </def>

    <!--
    A simpler in-place-editor type control.  Renders an `input` of the
    field that is automatically saved via Ajax onchange.
    -->
    <def tag='live-editor'>
      <div part="live-editor-part">
        <set my-field="&this_field"/>
        <formlet with="&this_parent" class="in-place-form" ajax errors-ok data-rapid="&data_rapid(:live_editor)">
          <error-messages/><%# TODO: replace with something more compact, maybe even transient %>
          <input field="&my_field"/>
        </formlet>
      </div>
    </def>

`<editor>` is now a polymorphic input that uses either `<click-editor>` or
`<live-editor>`.

TBD: Right now live-editor and click-editor use `<formlet>`.  The
major advantage of formlet is that it is safe to use inside of a form.
I can't think of any good use cases for that behaviour, but it does
seem like something people might do by accident.

The alternative is to use `<form>`.   Since this implementation of
editor starts with an input and switches to a view via Javascript,
using a form will allow reasonable javascript-disabled behaviour.

## Changes behind the scenes

### reloading of part context

[This change](https://github.com/tablatom/hobo/commit/6048925) ensures that
DRYML does not reload the part context if it is already in `this`.

### i18n

These commits will require translation updates for languages other
than English.  (Presumably this list will get larger because right now
the change is one I could do myself...)

- https://github.com/tablatom/hobo/commit/e9460d336ef85388af859e5082763bfae0ad01f5

### Hobo-jQuery incompatibilities

- annotations no longer contain an 'init' annotation.   Instead, hobo-jquery automatically calls hjq.<tag>.init if that function exists.

- annotations are marked with the 'rapid-annotated' class rather than 'hjq-annotated'.

- the standard `<submit>` tag now works in a formlet, there's no need to use `<formlet-submit>`

### controller changes

Due to limitations on Ajax file uploads, multipart forms are not sent with the proper Ajax headers.   If your controller action may receive multipart forms, rather than using:

   respond_to do |wants|
      wants.js { hobo_ajax_response }
      wants.html {...}
   end

use

   if request.params[:render]
      hobo_ajax_response
   else
      ....
   end

for more information see http://jquery.malsup.com/form/#file-upload

## Testing

hobo-jquery is being tested using capybara & qunit.js.



# FIXME

- spinner-next-to CSS vs id?
